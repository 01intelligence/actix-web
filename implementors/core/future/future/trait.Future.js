(function() {var implementors = {};
implementors["actix_http"] = [{"text":"impl Future for Response","synthetic":false,"types":[]},{"text":"impl Future for ResponseBuilder","synthetic":false,"types":[]},{"text":"impl&lt;T, S, B, X, U&gt; Future for Dispatcher&lt;T, S, B, X, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Response: Into&lt;Response&lt;B&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: MessageBody,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Service&lt;Request, Response = Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Error: Into&lt;Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Service&lt;(Request, Framed&lt;T, Codec&gt;), Response = ()&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Error: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, B&gt; Future for SendResponse&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: MessageBody + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S, B&gt; Future for Dispatcher&lt;T, S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Error&gt; + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Future: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Response: Into&lt;Response&lt;B&gt;&gt; + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: MessageBody + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Future for Dispatcher&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Frame, Response = Message&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Future: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["actix_web"] = [{"text":"impl&lt;U&gt; Future for UrlEncoded&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: DeserializeOwned + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;U&gt; Future for JsonBody&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: DeserializeOwned + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["awc"] = [{"text":"impl&lt;S&gt; Future for MessageBody&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Future for JsonBody&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: DeserializeOwned,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for SendClientRequest","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()