(function() {var implementors = {};
implementors["actix_files"] = [{"text":"impl Service&lt;ServiceRequest&gt; for FilesService","synthetic":false,"types":[]}];
implementors["actix_http"] = [{"text":"impl Service&lt;Request&lt;Pin&lt;Box&lt;dyn Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + 'static, Global&gt;&gt;&gt;&gt; for ExpectHandler","synthetic":false,"types":[]},{"text":"impl&lt;T, S, B, X, U&gt; Service&lt;(T, Option&lt;SocketAddr&gt;)&gt; for H1ServiceHandler&lt;T, S, B, X, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Service&lt;Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Response: Into&lt;Response&lt;B&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: MessageBody,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Service&lt;Request, Response = Request&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Error: Into&lt;Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Service&lt;(Request, Framed&lt;T, Codec&gt;), Response = ()&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Error: Display + Into&lt;Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Service&lt;(Request&lt;Pin&lt;Box&lt;dyn Stream&lt;Item = Result&lt;Bytes, PayloadError&gt;&gt; + 'static, Global&gt;&gt;&gt;, Framed&lt;T, Codec&gt;)&gt; for UpgradeHandler","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()